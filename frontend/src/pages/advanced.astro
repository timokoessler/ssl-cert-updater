---
import PageHeader from '@components/PageHeader.astro';
import BaseLayout from '@layouts/BaseLayout.astro';
---

<BaseLayout>
    <PageHeader title="Erweiterte Einstellungen" preTitle={import.meta.env.PUBLIC_APP_NAME} visible={false} />
    <div class="page-body">
        <div class="container-xl" id="container">
            <div class="center-loading text-center">
                <div class="mb-3 d-none d-lg-block">
                    <div class="navbar-brand navbar-brand-autodark">
                        <img src="/img/logo.svg" height="100" alt={import.meta.env.PUBLIC_APP_NAME} />
                    </div>
                </div>
                <div class="text-muted h2 mb-4">
                    Lade Daten<span class="animated-dots"></span>
                </div>
                <div class="progress progress-sm">
                    <div class="progress-bar progress-bar-indeterminate"></div>
                </div>
            </div>
        </div>
    </div>
</BaseLayout>

<style></style>
<script>
    import { Grid } from 'gridjs';
    import 'gridjs/dist/theme/mermaid.min.css';
    // @ts-ignore
    import { deDE } from 'gridjs/l10n';
    import { getWS } from '@scripts/socket';
    import { onFirstPageLoad, onPageLoad, registerLocalDocumentEvent } from '@scripts/router';

    let container: HTMLDivElement;
    let leAccountGrid: Grid;
    let pageInvisibleSince = -1;
    let leAccounts: LetsEncryptAccount[] = [];

    const socket = getWS();
    const isPageActive = () => window.location.pathname === '/advanced';

    registerLocalDocumentEvent('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
            pageInvisibleSince = Date.now();
        } else {
            if (pageInvisibleSince !== -1 && Date.now() - pageInvisibleSince > 1000) {
                socket.emit('requestUIUpdate', ['dnsprovider', 'letsencryptaccount']);
            }
            pageInvisibleSince = -1;
        }
    });

    onFirstPageLoad(() => {
        socket.on('letsEncryptAccountsUpdate', (leAccounts_: LetsEncryptAccount[]) => {
            if (!isPageActive()) return;
            leAccounts = leAccounts_;
            leAccountGrid
                .updateConfig({
                    data: letsencryptAccountsToGridData(),
                })
                .forceRender();
        });
    });

    onPageLoad(async () => {
        container = document.getElementById('container')! as HTMLDivElement;

        // Load data async
        const gridData = await Promise.all([loadLetsEncryptAccounts()]);

        container.innerHTML = `<div class="row mt-3">
            <div class="col-12">
                <h2 class="h2">Let's Encrypt Konten</h2>
                <hr class="mt-0 mb-3">
                <div id="leAccountGridWrapper"></div>
                <div class="mt-3 text-secondary"><small>Let's Encrypt Konten können bei der Erstellung eines Zertifikats hinzugefügt werden. Dieses Dashboard aktualisiert sich in Echtzeit.</small></div>
            </div>
        </div>`;
        document.getElementById('page-header')!.style.display = 'block';

        leAccountGrid = new Grid({
            columns: [
                {
                    id: 'id',
                    name: 'ID',
                    hidden: true,
                },
                {
                    id: 'email',
                    name: 'E-Mail Adresse',
                },
                {
                    name: 'Privater Schlüssel',
                    formatter: () => '********************************',
                },
                {
                    id: 'createdAt',
                    name: 'Erstellt am',
                },
            ],
            search: true,
            sort: true,
            resizable: false,
            language: deDE,
            data: gridData[0],
        }).render(document.getElementById('leAccountGridWrapper')!);
    });

    function letsencryptAccountsToGridData() {
        return leAccounts.map((account) => {
            return {
                id: account._id,
                email: account.email,
                createdAt: new Date(account.createdAt).toLocaleDateString(),
            };
        });
    }

    function loadLetsEncryptAccounts() {
        return new Promise((resolve: (data: ReturnType<typeof letsencryptAccountsToGridData>) => void, reject: (error: string) => void) => {
            socket.emit('getLetsEncryptAccounts', (leAccounts_: LetsEncryptAccount[]) => {
                if (!isPageActive()) return;
                if (!Array.isArray(leAccounts_)) reject('Es ist ein Fehler aufgetreten');
                leAccounts = leAccounts_;
                resolve(letsencryptAccountsToGridData());
            });
        });
    }
</script>
