---
import BaseLayout from '@layouts/BaseLayout.astro';
---

<BaseLayout pageType={'auth'}>
    <div class="card card-md shadow">
        <div class="card-body">
            <h2 class="h2 text-center mb-4">Anmeldung</h2>
            <form id="loginForm" data-astro-reload>
                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <input
                        type="email"
                        class="form-control"
                        placeholder="Geben Sie Ihre E-Mail Adresse ein"
                        id="email"
                        required
                        autocomplete="webauthn email"
                    />
                </div>
                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <input
                        type="password"
                        class="form-control"
                        placeholder="Geben Sie Ihr Passwort ein"
                        id="password"
                        required
                        autocomplete="webauthn password"
                    />
                </div>
                <div class="mb-0">
                    <label class="form-check">
                        <input type="checkbox" class="form-check-input" id="rememberMe" checked />
                        <span class="form-check-label">E-Mail Adresse merken</span>
                    </label>
                </div>
                <div class="form-footer">
                    <button type="submit" class="btn btn-primary shadow w-100">Einloggen</button>
                </div>
                <div class="alert alert-danger mt-3 mb-2" style="display:none;" id="errorAlert"></div>
            </form>
            <form id="verificationForm" autocomplete="off" class="d-none" data-astro-reload>
                <p class="my-4 text-center">
                    Sie melden sich von einem unbekannten Gerät an. Bitte geben Sie den Bestätigungscode ein, den Sie per E-Mail erhalten haben.
                </p>
                <div class="my-5">
                    <div class="row g-4">
                        {
                            [...Array(2).keys()].map((item) => (
                                <div class="col">
                                    <div class="row g-2">
                                        {[...Array(3).keys()].map((item) => (
                                            <div class="col">
                                                <input
                                                    type="text"
                                                    class="form-control form-control-lg text-center py-3"
                                                    maxlength="1"
                                                    inputmode="numeric"
                                                    pattern="[0-9]*"
                                                    data-code-input
                                                />
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            ))
                        }
                    </div>
                </div>
                <div class="my-4">
                    <label class="form-check">
                        <input type="checkbox" class="form-check-input" id="trustDevice" checked />
                        Diesem Gerät vertrauen
                    </label>
                </div>
                <div class="form-footer">
                    <button type="submit" id="loginBtn" class="btn btn-primary shadow w-100">Einloggen</button>
                </div>
                <div class="alert alert-danger mt-3 mb-2 d-none" id="verificationErrorAlert"></div>
            </form>
            <div class="hr-text" id="orHr">oder</div>
            <button type="button" class="btn btn-secondary w-100 shadow" id="webAuthnBtn" disabled>
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="icon icon-tabler icon-tabler-fingerprint"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    stroke-width="2"
                    stroke="currentColor"
                    fill="none"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                    <path d="M18.9 7a8 8 0 0 1 1.1 5v1a6 6 0 0 0 .8 3"></path>
                    <path d="M8 11a4 4 0 0 1 8 0v1a10 10 0 0 0 2 6"></path>
                    <path d="M12 11v2a14 14 0 0 0 2.5 8"></path>
                    <path d="M8 15a18 18 0 0 0 1.8 6"></path>
                    <path d="M4.9 19a22 22 0 0 1 -.9 -7v-1a8 8 0 0 1 12 -6.95"></path>
                </svg>
                Passkey / Sicherheitsschlüssel verwenden
            </button>
            <div class="alert alert-danger mt-3 mb-2" style="display:none;" id="errorAlertWebAuthn"></div>
        </div>
    </div>
    <div class="text-center text-muted mt-4">
        Passwort vergessen? <a href="/forgotPassword">Passwort zurücksetzen</a>
    </div>
</BaseLayout>

<style></style>

<script>
    import { onPageLoad } from '@scripts/router';
    import { startAuthentication as webAuthnStartAuthentication, browserSupportsWebAuthn, browserSupportsWebAuthnAutofill } from '@simplewebauthn/browser';
    import { navigate } from 'astro:transitions/client';

    async function checkLoggedIn(loginSuccessUrl: string) {
        try {
            const response = await fetch('/api/loggedIn');
            if (response.status === 200) {
                navigate(loginSuccessUrl);
            }
        } catch (err) {
            console.error(err);
        }
    }

    let emailInput: HTMLInputElement;
    let rememberMe: HTMLInputElement;
    let passwordInput: HTMLInputElement;
    let bc: BroadcastChannel;
    let loginSuccessUrl = '/';

    const isPageActive = () => window.location.pathname === '/login';

    onPageLoad(async () => {
        emailInput = document.getElementById('email')! as HTMLInputElement;
        rememberMe = document.getElementById('rememberMe')! as HTMLInputElement;
        bc = new BroadcastChannel(import.meta.env.PUBLIC_BROADCAST_CHANNEL);
        passwordInput = document.getElementById('password')! as HTMLInputElement;

        const webAuthnBtn = document.getElementById('webAuthnBtn')!;
        const loginForm = document.getElementById('loginForm')! as HTMLFormElement;

        emailInput.addEventListener('change', () => {
            if (!emailInput.value.length) {
                webAuthnBtn.setAttribute('disabled', 'true');
                return;
            }
            webAuthnBtn.removeAttribute('disabled');
        });

        const storedEmail = localStorage.getItem('email');
        if (storedEmail) {
            emailInput.value = storedEmail;
            webAuthnBtn.removeAttribute('disabled');
        }

        if (emailInput.value.length) {
            passwordInput.focus();
        } else {
            emailInput.focus();
        }

        if (!browserSupportsWebAuthn()) {
            webAuthnBtn.style.display = 'none';
            const errorAlertWebAuthn = document.getElementById('errorAlertWebAuthn')!;
            errorAlertWebAuthn.innerText = 'Dies Gerät unterstützt leider kein Login per WebAuthn (Passkey).';
            errorAlertWebAuthn.classList.remove('alert-danger');
            errorAlertWebAuthn.classList.add('alert-secondary');
            errorAlertWebAuthn.style.display = 'block';
        }

        try {
            const refUrl = new URL(document.referrer);
            const hrefUrl = new URL(document.location.href);
            if (
                typeof document.referrer === 'string' &&
                document.referrer.length > 0 &&
                hrefUrl.host === refUrl.host &&
                !refUrl.pathname.startsWith('/register') &&
                !refUrl.pathname.startsWith('/login')
            ) {
                loginSuccessUrl = document.referrer;
            }
        } catch (err) {}

        checkLoggedIn(loginSuccessUrl);

        bc.addEventListener('message', (event) => {
            if (event.data === 'login' && isPageActive()) {
                navigate(loginSuccessUrl);
            }
        });

        const errorAlert = document.getElementById('errorAlert')!;
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!emailInput.value.length) {
                emailInput.focus();
                errorAlert.innerHTML = 'Bitte geben Sie Ihre E-Mail Adresse ein.';
                return;
            }

            if (!passwordInput.value.length) {
                passwordInput.focus();
                errorAlert.innerHTML = 'Bitte geben Sie Ihr Passwort ein.';
                return;
            }

            sendLoginRequest((errorText) => {
                errorAlert.innerHTML = errorText;
                errorAlert.style.display = 'block';
            });
        });

        document.getElementById('webAuthnBtn')!.addEventListener('click', async () => {
            const errorAlertWebAuthn = document.getElementById('errorAlertWebAuthn')!;
            errorAlertWebAuthn.style.display = 'none';

            const resp = await fetch('/api/webAuthn/getAuthenticationOptions?email=' + emailInput.value);
            if (resp.status !== 200) {
                errorAlertWebAuthn.innerText = 'Auf diesem Gerät ist WebAuthn nicht verfügbar oder wurde noch nicht eingerichtet.';
                errorAlertWebAuthn.style.display = 'block';
                localStorage.removeItem('webAuthnUsed');
                return;
            }

            let asseResp;
            try {
                asseResp = await webAuthnStartAuthentication(await resp.json(), await browserSupportsWebAuthnAutofill());
            } catch (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                const errorMsg = error.message as string;
                errorAlertWebAuthn.innerText = errorMsg;
                errorAlertWebAuthn.style.display = 'block';
                localStorage.removeItem('webAuthnUsed');
                console.error(error);
            }

            const verificationResp = await fetch('/api/webAuthn/verifyAuthentication?email=' + emailInput.value, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(asseResp),
            });

            if (verificationResp.status === 418) {
                deviceVerificationRequired();
                return;
            }

            const verificationJSON = await verificationResp.json();

            if (verificationResp.ok && verificationJSON && verificationJSON.verified) {
                localStorage.setItem('webAuthnUsed', 'true');
                if (rememberMe.checked) {
                    localStorage.setItem('email', emailInput.value);
                } else {
                    localStorage.clear();
                }
                bc.postMessage('login');
                navigate(loginSuccessUrl);
            } else {
                errorAlertWebAuthn.innerHTML = `Es ist ein Fehler aufgetreten: <pre>${JSON.stringify(verificationJSON)}</pre>`;
                errorAlertWebAuthn.style.display = 'block';
                localStorage.removeItem('webAuthnUsed');
            }
        });

        const webAuthnUsed = localStorage.getItem('webAuthnUsed');
        if (webAuthnUsed) {
            const hrefUrl = new URL(document.location.href);
            if (!hrefUrl.searchParams.has('logout')) {
                document.getElementById('webAuthnBtn')!.click();
            }
        }
    });

    async function sendLoginRequest(error: (text: string) => void, deviceToken?: string, trustDevice?: boolean) {
        const response = await fetch('/api/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                email: emailInput.value,
                password: passwordInput.value,
                deviceToken,
                trustDevice,
            }),
        });
        localStorage.removeItem('webAuthnUsed');
        if (response.status === 200) {
            if (rememberMe.checked) {
                localStorage.setItem('email', emailInput.value);
            } else {
                localStorage.clear();
            }
            bc.postMessage('login');
            navigate(loginSuccessUrl);
            return;
        }
        if (response.status === 418) {
            //I'm a teapot
            deviceVerificationRequired();
            return;
        }
        const text = await response.text();
        error(text);
    }

    function deviceVerificationRequired() {
        const loginForm = document.getElementById('loginForm')!;
        const orHr = document.getElementById('orHr')!;
        const webAuthnBtn = document.getElementById('webAuthnBtn')!;
        const errorAlertWebAuthn = document.getElementById('errorAlertWebAuthn')!;
        const verificationForm = document.getElementById('verificationForm')! as HTMLFormElement;
        const errorAlert = document.getElementById('verificationErrorAlert')!;

        loginForm.style.display = 'none';
        orHr.style.display = 'none';
        webAuthnBtn.style.display = 'none';
        errorAlertWebAuthn.style.display = 'none';
        verificationForm.classList.remove('d-none');

        const codeInputs = document.querySelectorAll('[data-code-input]') as NodeListOf<HTMLInputElement>;
        for (let i = 0; i < codeInputs.length; i++) {
            codeInputs[i].addEventListener('input', function (e) {
                if (!e.target) {
                    return;
                }
                // If the input field has a character, and there is a next input field, focus it
                if ((e.target as HTMLInputElement).value.length === (e.target as HTMLInputElement).maxLength) {
                    if (i + 1 < codeInputs.length) {
                        codeInputs[i + 1].focus();
                    } else {
                        document.getElementById('loginBtn')!.focus();
                    }
                }
            });

            codeInputs[i].addEventListener('keydown', function (e) {
                if (!e.target) {
                    return;
                }
                // If the input field is empty and the keyCode for Backspace (8) is detected, and there is a previous input field, focus it
                if ((e.target as HTMLInputElement).value.length === 0 && (e as KeyboardEvent).keyCode === 8 && i > 0) {
                    codeInputs[i - 1].focus();
                }
            });

            codeInputs[i].addEventListener('paste', function (e) {
                if (!e.target) {
                    return;
                }
                const clipboardData = (e as ClipboardEvent).clipboardData;
                if (!clipboardData) {
                    return;
                }
                const pastedText = clipboardData.getData('text');
                if (pastedText.length === codeInputs.length && /^[0-9]+$/.test(pastedText)) {
                    for (let j = 0; j < codeInputs.length; j++) {
                        codeInputs[j].value = pastedText[j];
                    }
                    document.getElementById('loginBtn')!.focus();
                } else {
                    e.preventDefault();
                }
            });
        }
        codeInputs[0].focus();

        const trustDeviceCheckbox = document.getElementById('trustDevice')! as HTMLInputElement;

        verificationForm.addEventListener('submit', (e) => {
            e.preventDefault();
            errorAlert.classList.add('d-none');

            const token = [...Array(6).keys()].map((i) => codeInputs[i].value).join('');
            if (!token.length) {
                codeInputs[0].focus();
                errorAlert.innerHTML = 'Bitte geben Sie den Bestätigungscode ein.';
                errorAlert.classList.remove('d-none');
                return;
            }
            sendLoginRequest(
                (errorText) => {
                    errorAlert.innerHTML = errorText;
                    errorAlert.classList.remove('d-none');
                },
                token,
                trustDeviceCheckbox.checked,
            );
        });
    }
</script>
