---
import PageHeader from '@components/PageHeader.astro';
import BaseLayout from '@layouts/BaseLayout.astro';
---

<BaseLayout>
    <PageHeader title="Zertifikat erstellen" preTitle={import.meta.env.PUBLIC_APP_NAME} visible={true} />
    <div class="page-body mt-2">
        <div class="container-xl">
            <div class="row mt-3">
                <div class="col-lg-6 mt-4 mt-lg-0">
                    <div class="card shadow">
                        <div class="card-body pe-2 py-4" id="card-body">
                            <div id="container">
                                <label class="h2">Zertifikatstyp auswählen</label>
                                <hr class="mt-0 mb-3" />
                                <div class="form-selectgroup form-selectgroup-boxes d-flex flex-column">
                                    <label class="form-selectgroup-item flex-fill">
                                        <input type="radio" name="radio-cert-type" value="le" class="form-selectgroup-input" checked />
                                        <div class="form-selectgroup-label d-flex align-items-center p-3">
                                            <div class="me-3">
                                                <span class="form-selectgroup-check"></span>
                                            </div>
                                            <div>Let's Encrypt <span class="badge text-bg-success ms-2">Standard</span></div>
                                        </div>
                                    </label>
                                    <label class="form-selectgroup-item flex-fill text-secondary" style="cursor:none;">
                                        <input type="radio" name="radio-cert-type" value="custom" class="form-selectgroup-input" disabled />
                                        <div class="form-selectgroup-label d-flex align-items-center p-3">
                                            <div class="me-3">
                                                <span class="form-selectgroup-check"></span>
                                            </div>
                                            <div>Eigenes Zertifikat <span class="badge ms-2">Nicht verfügbar</span></div>
                                        </div>
                                    </label>
                                </div>
                                <button class="btn btn-primary mt-3 d-inline" id="nextBtn"
                                    ><i class="ti ti-square-rounded-arrow-right-filled me-1"></i> Weiter</button
                                >
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 mt-3 mt-lg-0"></div>
            </div>
        </div>
    </div>
    <div class="modal modal-blur fade" id="running-modal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Aktuelle Zertifikatsanfragen</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Schließen"></button>
                </div>
                <div class="modal-body" id="running-modal-body"></div>
                <div class="modal-footer">
                    <button type="button" class="btn me-auto" data-bs-dismiss="modal">Neues Zertifikat erstellen</button>
                </div>
            </div>
        </div>
    </div>
</BaseLayout>

<style></style>
<script>
    import { errorAlert, cardLoading, listGroupItem } from '@scripts/components';
    import isFQDN from 'validator/es/lib/isFQDN';
    import autosize from 'autosize';
    import confetti from 'canvas-confetti';
    import { getWS } from '@scripts/socket';
    import { onPageLoad } from '@scripts/router';
    import { navigate } from 'astro:transitions/client';

    const selectGroup = (name: string, value: string, content: string, checked: boolean) => `<label class="form-selectgroup-item flex-fill">
    <input type="radio" name="${name}" value="${value}" class="form-selectgroup-input" ${checked ? 'checked' : ''}>
    <div class="form-selectgroup-label d-flex align-items-center p-3">
        <div class="me-3">
            <span class="form-selectgroup-check"></span>
        </div>
        <div>${content}</div>
    </div>
    </label>`;

    let leAccountID: string;

    const socket = getWS();
    const isPageActive = () => window.location.pathname === '/newCert';

    let certRequestID: string;

    // Page load
    onPageLoad(() => {
        const container = document.getElementById('container')!;
        document.getElementById('nextBtn')?.addEventListener('click', async () => {
            const certType = (document.querySelector('input[name="radio-cert-type"]:checked') as HTMLInputElement).value;
            if (certType === 'custom') {
                container.innerHTML = errorAlert('Diese Funktion ist noch nicht verfügbar');
                return;
            }
            container.innerHTML = cardLoading("Lade Let's Encrypt Konten");
            socket.emit('getLetsEncryptAccounts', async (accounts: LetsEncryptAccount[]) => {
                if (!isPageActive()) return;
                if (!Array.isArray(accounts)) {
                    container.innerHTML = errorAlert("Fehler beim Laden der Let's Encrypt Konten");
                    return;
                }
                if (accounts.length === 0) {
                    newLEAccount();
                    return;
                }
                accounts.push({
                    _id: 'new',
                    email: 'Neues Konto erstellen',
                    createdAt: 0,
                });
                container.innerHTML = `<label class="h2">Let's Encrypt Konto auswählen</label>
                <hr class="mt-0 mb-3">
                <div class="form-selectgroup form-selectgroup-boxes d-flex flex-column">
                    ${accounts.map((account, index) => selectGroup('radio-le-account', account._id, account.email, index === 0)).join('')}
                </div>
                <button class="btn btn-primary mt-3 d-inline" id="nextBtn"><i class="ti ti-square-rounded-arrow-right-filled me-1"></i> Weiter</button>`;

                document.getElementById('nextBtn')?.addEventListener('click', async () => {
                    const accountID = (document.querySelector('input[name="radio-le-account"]:checked') as HTMLInputElement).value;
                    if (accountID === 'new') {
                        newLEAccount();
                        return;
                    }
                    leAccountID = accountID;
                    selectDomain();
                });
            });
        });
        socket.emit('getRunningCertRequests', (requests: RunningCertRequest[]) => {
            if (!isPageActive()) return;
            if (!Array.isArray(requests)) return;
            if (requests.length > 0) {
                // @ts-ignore
                const runningModal = bootstrap.Modal.getOrCreateInstance('#running-modal');
                const runningModalBody = document.getElementById('running-modal-body')!;
                runningModalBody.innerHTML = `<div class="mb-3">Aktuell ${
                    requests.length === 1 ? 'wird ein Zertifikat erstellt' : 'werden ' + requests.length + ' Zertifikate erstellt'
                }.</div>`;
                runningModalBody.innerHTML += `<hr class="mt-1 mb-3"><div class="list-group list-group-flush list-group-hoverable">`;
                for (const request of requests) {
                    runningModalBody.innerHTML += listGroupItem(
                        request.altNames.join(', '),
                        `Gestartet: ${new Date(request.startedAt).toLocaleString()}`,
                        request._id,
                        'ti ti-certificate text-primary',
                    );
                }
                runningModalBody.innerHTML += `</div>`;
                runningModal.show();

                for (const item of document.querySelectorAll<HTMLElement>('.list-group-item-link')) {
                    item.addEventListener('click', (e) => {
                        e.preventDefault();
                        runningModal.hide();
                        if (!item.dataset.id) return;
                        certRequestID = item.dataset.id;
                        certRequestPending(true);
                    });
                }
            }
        });
    });

    socket.io.on('reconnect', () => {
        if (isPageActive() && certRequestID) {
            window.location.reload();
        }
    });

    function newLEAccount() {
        const container = document.getElementById('container')!;
        container.innerHTML = `<label class="h2">Let's Encrypt Konto erstellen</label>
    <hr class="mt-0 mb-3">
    <input type="email" class="form-control" id="leAccountEmail" placeholder="E-Mail Adresse eingeben" required>
    <div class="mt-1"><small>Sie erhalten eine E-Mail von Let's Encrypt, wenn ein Zertifikat bald abläuft.</small></div>
    <button class="btn btn-primary mt-3 d-inline" id="nextBtn"><i class="ti ti-square-rounded-arrow-right-filled me-1"></i> Weiter</button>`;
        document.getElementById('nextBtn')?.addEventListener('click', async () => {
            const emailInput = document.getElementById('leAccountEmail') as HTMLInputElement;
            emailInput.classList.remove('is-invalid');
            if (!emailInput.value.length || !emailInput.checkValidity()) {
                emailInput.classList.add('is-invalid');
                return;
            }
            container.innerHTML = cardLoading("Erstelle Let's Encrypt Konto");
            socket.emit('createLetsEncryptAccount', emailInput.value, async (success: boolean, data: string) => {
                if (!isPageActive()) return;
                if (!success) {
                    container.innerHTML = errorAlert(`Fehler beim Erstellen des Let's Encrypt Kontos: ${data}`);
                    return;
                }
                leAccountID = data;
                selectDomain();
            });
        });
    }

    function selectDomain() {
        const container = document.getElementById('container')!;
        container.innerHTML = `<div class="h2">Domain & Subdomains</div>
    <hr class="mt-0 mb-3">
    <div class="mb-3">Geben Sie alle Domains und Subdomains an, für die Sie ein Zertifikat erstellen möchten. Sie können auch Wildcard-Domains eingeben, indem Sie ein * verwenden.</div>
    <div class="mb-3">
        <label class="form-label required">Domains des SSL-Zertifikats</label>
        <textarea class="form-control" placeholder="example.com,*.example.com"></textarea>
        <div class="mt-1"><small>Trenne die Domains mit Zeilenumbrüchen, Leerzeichen oder Kommas. Bitte geben Sie Domains mit Sonderzeichen in IDN-Form an.</small></div>
    </div>
    <div id="errorContainer" style="display:none;"></div>
    <button class="btn btn-danger mt-2 d-inline" id="nextBtn"><i class="ti ti-square-rounded-arrow-right-filled me-1"></i> Weiter</button>`;
        autosize(document.querySelector('textarea') as HTMLTextAreaElement);
        document.getElementById('nextBtn')?.addEventListener('click', async () => {
            const domainsInput = document.querySelector('textarea') as HTMLTextAreaElement;
            const errorContainer = document.getElementById('errorContainer')!;
            domainsInput.classList.remove('is-invalid');
            errorContainer.style.display = 'none';
            const domains = [...new Set(domainsInput.value.split(/[\s,;]+/))];
            if (domains.length === 0) {
                domainsInput.classList.add('is-invalid');
                errorContainer.innerHTML = errorAlert('Bitte geben Sie mindestens eine Domain an.');
                errorContainer.style.display = 'block';
                return;
            }
            for (const domain of domains) {
                if (
                    !isFQDN(domain, {
                        require_tld: true,
                        allow_underscores: false,
                        allow_trailing_dot: false,
                        allow_wildcard: true,
                    })
                ) {
                    domainsInput.classList.add('is-invalid');
                    errorContainer.innerHTML = errorAlert(`Ungültige Domain: ${domain}`);
                    errorContainer.style.display = 'block';
                    return;
                }
            }
            checkDNSConfig(domains);
        });
    }

    function checkDNSConfig(domains: string[]) {
        const container = document.getElementById('container')!;

        container.innerHTML = cardLoading('Überprüfe DNS-Konfiguration');

        socket.emit('checkDNSConfig', domains, async (status: { domain: string; success: boolean }[], destinationHost: string) => {
            if (!isPageActive()) return;
            if (!Array.isArray(status) || typeof destinationHost !== 'string') {
                container.innerHTML = errorAlert('Es ist ein Fehler bei der Überprüfung der DNS-Konfiguration aufgetreten.');
                return;
            }
            const invalidDomains = status.filter((s) => !s.success).map((s) => s.domain);
            if (!invalidDomains.length) {
                startCertRequest(domains);
                return;
            }

            let correctConfigHtml = '';
            for (const invalidDomain of invalidDomains) {
                if (invalidDomain.startsWith('*.') && invalidDomains.includes(invalidDomain.substring(2))) {
                    continue;
                }

                let dnsName = `_acme-challenge.${domainToSubdomain(invalidDomain.startsWith('*.') ? invalidDomain.substring(2) : invalidDomain)}`;
                if (dnsName.endsWith('.')) {
                    dnsName = dnsName.substring(0, dnsName.length - 1);
                }
                correctConfigHtml += `<div class="fw-bold mb-3 h4">${invalidDomain}</div>
                <div class="mb-3"><pre>${dnsName} NS ${destinationHost}</pre></div>`;
            }

            container.innerHTML = `<div class="h2">DNS-Konfiguration</div>
                <hr class="mt-0 mb-3">
                <div class="mb-3">Für die folgenden Domains muss zunächst die DNS-Konfiguration angepasst werden, bevor ein Zertifikat erstellt werden kann:</div>
                ${correctConfigHtml}
                <div class="mb-3"><small>Bitte erstellen Sie die entsprechenden DNS-Einträge und warten Sie, bis die Änderungen übernommen wurden. Dies kann bis zu 24 Stunden dauern.
                Sie können die DNS-Konfiguration jederzeit erneut überprüfen, indem Sie auf den Button unten klicken. Außerdem können Sie die Zertifikatsanfrage abbrechen und zu einem späteren Zeitpunkt erneut starten.</small></div>
                <button class="btn btn-danger mt-2 d-inline" id="nextBtn"><i class="ti ti-square-rounded-arrow-right-filled me-1"></i> Weiter</button>`;

            document.getElementById('nextBtn')?.addEventListener('click', async () => {
                checkDNSConfig(domains);
            });
        });
    }

    function domainToSubdomain(domain: string): string {
        const parts = domain.split('.');
        return parts.slice(0, parts.length - 2).join('.');
    }

    function startCertRequest(domains: string[]) {
        const container = document.getElementById('container')!;
        container.innerHTML = cardLoading('Kontaktiere Server');
        socket.emit('requestLetsEncryptCert', leAccountID, domains, async (success: boolean, errorMsg: string, id: string) => {
            if (!isPageActive()) return;
            if (!success) {
                container.innerHTML = errorAlert(`Fehler beim Erstellen des Zertifikats: ${errorMsg}`);
                return;
            }
            certRequestID = id;
            certRequestPending();
        });
    }

    function certRequestPending(loadOldLogs = false) {
        const container = document.getElementById('container')!;
        container.innerHTML = cardLoading('Zertifikat wird erstellt');
        container.innerHTML += '<hr class="mt-3 mb-3"><h4>Logs</h4><div class="mb-3"><pre id="logContainer"></pre></div>';
        const logContainer = document.getElementById('logContainer')!;
        socket.on('certRequestStatus', (certID: string, success: boolean, errorMsg?: string) => {
            if (!isPageActive()) return;
            if (certID !== certRequestID) return;
            if (!success) {
                container.innerHTML =
                    errorAlert(`Fehler beim Erstellen des Zertifikats: ${errorMsg}`) +
                    `<hr class="mt-3 mb-3"><h4>Logs</h4><div class="mb-3"><pre id="logContainer">${
                        document.getElementById('logContainer')?.innerHTML
                    }</pre></div>`;
                return;
            }
            container.innerHTML = `<div class="alert alert-success mt-3 mb-3">Das Zertifikat wurde erfolgreich erstellt. 🥳</div>
        <button class="btn btn-success mt-2 d-inline" id="nextBtn"><i class="ti ti-square-rounded-arrow-right-filled me-1"></i>Zur Startseite</button>
        <hr class="mt-3 mb-3"><h4>Logs</h4><div class="mb-3"><pre id="logContainer">${document.getElementById('logContainer')?.innerHTML}</pre></div>`;
            document.getElementById('nextBtn')?.addEventListener('click', async () => {
                navigate('/');
            });
            try {
                confetti();
            } catch {
                // Catch error if navigating away from page before confetti is finished completely
            }
        });
        if (loadOldLogs) {
            socket.emit('getCertRequestLogs', certRequestID, (logs: CertRequestLog[]) => {
                if (!isPageActive()) return;
                for (const log of logs) {
                    logContainer.innerHTML += logToString(log);
                }
            });
        }
    }

    socket.on('certRequestLog', (log: CertRequestLog) => {
        if (!isPageActive()) return;
        if (log.certID !== certRequestID) return;
        const logContainer = document.getElementById('logContainer')!;
        if (!logContainer) return;
        logContainer.innerHTML += logToString(log);
    });

    function logToString(log: CertRequestLog) {
        log.content = log.content.replace(/</g, '&lt;').replace(/>/g, '&gt;');
        log.content = log.content.replace(/\n/g, '<br>');
        return `<span class="${log.logLevel === 'error' ? 'text-danger' : log.logLevel === 'warn' ? 'text-warning' : ''}">${new Date(
            log.createdAt,
        ).toLocaleString()}: ${log.logLevel} - ${log.content}</span><br>`;
    }
</script>
