---
import PageHeader from '@components/PageHeader.astro';
import BaseLayout from '@layouts/BaseLayout.astro';
import { navigate } from 'astro:transitions/client';
---

<BaseLayout>
    <PageHeader title="Dashboard" preTitle={import.meta.env.PUBLIC_APP_NAME} visible={false}>
        <button class="btn btn-primary d-inline-block" id="logoutBtn"><i class="ti ti-logout me-1"></i> Abmelden</button>
    </PageHeader>
    <div class="page-body">
        <div class="container-xl" id="container">
            <div class="center-loading text-center">
                <div class="mb-3 d-none d-lg-block">
                    <div class="navbar-brand navbar-brand-autodark">
                        <img src="/img/logo.svg" height="100" alt={import.meta.env.PUBLIC_APP_NAME} />
                    </div>
                </div>
                <div class="text-muted h2 mb-4">
                    Lade Daten<span class="animated-dots"></span>
                </div>
                <div class="progress progress-sm">
                    <div class="progress-bar progress-bar-indeterminate"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal modal-blur fade" id="uninstall-modal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Server entfernen</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Schließen"></button>
                </div>
                <div class="modal-body">
                    Um diesen Server zu entfernen, müssen Sie den SSL-Zertifikat Updater deinstallieren. Führen Sie dazu folgenden Befehl auf dem Server aus:
                    <div class="mt-3"><pre id="uninstallCommand">sslup uninstall</pre></div>
                    <div class="mt-3"><a href="javascript:void(0)" role="button" id="deleteSSLServerMBtn" class="text-danger">Trotzdem löschen</a></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn me-auto" data-bs-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal modal-blur fade" id="update-modal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Server aktualisieren</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Schließen"></button>
                </div>
                <div class="modal-body">
                    Um diesen Server zu aktualisieren, führen Sie bitte folgenden Befehl auf dem Server aus:
                    <div class="mt-3"><pre id="updateCommand">sslup update</pre></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn me-auto" data-bs-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal modal-blur fade" id="remove-ssl-cert-modal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">SSL-Zertifikat löschen</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Schließen"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3" role="alert">
                        Wenn Sie das Zertifikat wiederrufen, wird es als ungültig markiert und kann nicht mehr verwendet werden. <a
                            href="https://de.wikipedia.org/wiki/Online_Certificate_Status_Protocol"
                            target="_blank"
                            rel="noopener noreferrer">Mehr Informationen</a
                        ><br />
                        Das Zertifikat wird nicht von den Servern entfernt, auf denen es installiert ist!
                    </div>
                    <div class="mb-3"><strong>Ausgewähltes Zertifikat:</strong> <span id="remove-ssl-cert-alt-names"></span></div>
                    <hr class="mt-0 mb-4" />
                    <div class="mb-3">
                        <label class="form-check">
                            <input class="form-check-input" type="checkbox" id="remove-ssl-cert-revoke" />
                            <span class="form-check-label">SSL-Zertifikat wiederrufen</span>
                        </label>
                    </div>
                    <div class="mb-3">
                        <div class="form-label" id="remove-ssl-cert-reason-label">Grund für den Wiederruf (RFC5280)</div>
                        <select class="form-select" id="remove-ssl-cert-reason" disabled>
                            <option value="0">Nicht spezifiziert (0)</option>
                            <option value="1">Schlüssel kompromittiert (1)</option>
                            <option value="3">Zugehörigkeit geändert (3)</option>
                            <option value="4">Zertifikat wurde ersetzt (4)</option>
                            <option value="5">Einstellung des Betriebs aller Domains (5)</option>
                        </select>
                    </div>
                    <div id="remove-ssl-status-container"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn me-auto" id="remove-ssl-cert-close" data-bs-dismiss="modal">Abbrechen</button>
                    <button type="button" class="btn btn-danger" id="remove-ssl-cert-submit">Löschen</button>
                </div>
            </div>
        </div>
    </div>
</BaseLayout>

<style></style>
<script>
    // @ts-ignore
    import { Grid, html as gridHtml } from 'gridjs';
    import 'gridjs/dist/theme/mermaid.min.css';
    // @ts-ignore
    import { deDE } from 'gridjs/l10n';
    import { capitalizeFirstLetter, compareVersions, humanTimeDiffNow } from '@scripts/utils';
    import { getWS } from '@scripts/socket';
    import { registerLocalDocumentEvent, onFirstPageLoad, onPageLoad, onPageLeave } from '@scripts/router';
    import { errorAlert, successAlert } from '@scripts/components';
    import { navigate } from 'astro:transitions/client';

    let container: HTMLDivElement;
    let sslCertGrid: Grid;
    let serverGrid: Grid;
    let latestClientVersion: string;
    let pageVisible = true;
    let pageInvisibleSince = -1;
    let deleteSSLServerMBtn: HTMLButtonElement;
    let sslCerts: SSLCert[] = [];

    const socket = getWS();

    const isPageActive = () => window.location.pathname === '/';

    // First page load
    onFirstPageLoad(() => {
        registerLocalDocumentEvent('click', (e) => {
            let clickActionDataset: DOMStringMap | undefined;
            const target = e.target as HTMLElement;
            const parent = target.parentElement;
            if (target.dataset && target.dataset.action) {
                clickActionDataset = target.dataset;
            } else if (parent && parent.dataset && parent.dataset.action) {
                clickActionDataset = parent.dataset;
            }
            if (!clickActionDataset) return;

            if (clickActionDataset.action === 'deleteSSLCert') {
                const id = clickActionDataset.id;
                if (!id) return;
                const sslCert = sslCerts.find((cert) => cert._id === id);
                if (!sslCert) return;
                document.getElementById('remove-ssl-cert-submit')!.dataset.id = id;
                document.getElementById('remove-ssl-cert-submit')!.removeAttribute('disabled');
                document.getElementById('remove-ssl-status-container')!.innerHTML = '';
                document.getElementById('remove-ssl-cert-alt-names')!.innerText = ` ${sslCert.altNames.join(', ')}`;
                (document.getElementById('remove-ssl-cert-revoke')! as HTMLInputElement).checked = false;
                document.getElementById('remove-ssl-cert-close')!.innerHTML = 'Abbrechen';
                // @ts-expect-error
                const removeModal = bootstrap.Modal.getOrCreateInstance('#remove-ssl-cert-modal');
                removeModal.show();
            } else if (clickActionDataset.action === 'deleteServer') {
                if (!clickActionDataset.id) return;
                if (clickActionDataset.lastOnline === '0') {
                    if (!confirm('Soll der Server wirklich unwiderruflich gelöscht werden?')) return;
                    socket.emit('deleteServer', clickActionDataset.id, (error: string) => {
                        if (error) {
                            alert(error);
                        }
                    });
                    return;
                }
                deleteSSLServerMBtn.dataset.id = clickActionDataset.id;
                // @ts-expect-error
                const uninstallModal = bootstrap.Modal.getOrCreateInstance('#uninstall-modal');
                uninstallModal.show();
            } else if (clickActionDataset.action === 'editServer') {
                const id = clickActionDataset.id;
                if (!id) return;
                navigate(`/server/${id}`);
            } else if (clickActionDataset.action === 'serverLogs') {
                const id = clickActionDataset.id;
                if (!id) return;
                navigate(`/server/${id}/logs`);
            }
        });

        setInterval(() => {
            if (isPageActive() && pageVisible && serverGrid) serverGrid.forceRender();
        }, 1000 * 30);

        setInterval(
            () => {
                if (isPageActive() && pageVisible && sslCertGrid) sslCertGrid.forceRender();
            },
            1000 * 60 * 60,
        );

        socket.on('serversUpdate', (servers: SSLServer[]) => {
            if (!isPageActive() || !pageVisible) return;
            serverGrid.config.plugin.remove('search');
            serverGrid
                .updateConfig({
                    data: serversToGridData(servers),
                })
                .forceRender();
        });

        socket.on('sslCertsUpdate', (certs: SSLCert[]) => {
            sslCerts = certs;
            if (!isPageActive() || !pageVisible) return;
            sslCertGrid.config.plugin.remove('search');
            sslCertGrid
                .updateConfig({
                    data: sslCertsToGridData(certs),
                })
                .forceRender();
        });

        socket.on('runningCertRequestsUpdate', runningCertRequestsAlert);
    });

    // On every page load
    onPageLoad(() => {
        container = document.getElementById('container')! as HTMLDivElement;
        renderGrids();

        socket.emit('joinUIUpdates', ['server', 'sslcert', 'runningcertrequest']);
        onPageLeave(() => {
            socket.emit('leaveUIUpdates', ['server', 'sslcert', 'runningcertrequest']);
        });

        deleteSSLServerMBtn = document.getElementById('deleteSSLServerMBtn')! as HTMLButtonElement;
        // @ts-expect-error
        const uninstallModal = bootstrap.Modal.getOrCreateInstance('#uninstall-modal');
        deleteSSLServerMBtn.addEventListener('click', () => {
            if (!confirm('Soll der Server wirklich unwiderruflich gelöscht werden?')) return;
            uninstallModal.hide();
            socket.emit('deleteServer', deleteSSLServerMBtn.dataset.id, (error: string) => {
                if (error) {
                    alert(error);
                }
            });
        });

        const uninstallCommand = document.getElementById('uninstallCommand')!;
        uninstallCommand.addEventListener('click', () => {
            navigator.clipboard.writeText(uninstallCommand.innerText);
            uninstallCommand.classList.add('text-success', 'fw-bold');
            uninstallCommand.innerText = 'In Zwischenablage kopiert';
            setTimeout(() => {
                uninstallCommand.classList.remove('text-success', 'fw-bold');
                uninstallCommand.innerText = 'sslup uninstall';
            }, 1000);
        });

        const updateCommand = document.getElementById('updateCommand')!;
        updateCommand.addEventListener('click', () => {
            navigator.clipboard.writeText(updateCommand.innerText);
            updateCommand.classList.add('text-success', 'fw-bold');
            updateCommand.innerText = 'In Zwischenablage kopiert';
            setTimeout(() => {
                updateCommand.classList.remove('text-success', 'fw-bold');
                updateCommand.innerText = 'sslup update';
            }, 1000);
        });

        const revokeCertCheck = document.getElementById('remove-ssl-cert-revoke')! as HTMLInputElement;
        const revokeReason = document.getElementById('remove-ssl-cert-reason')! as HTMLSelectElement;
        const revokeReasonLabel = document.getElementById('remove-ssl-cert-reason-label')!;
        revokeCertCheck.addEventListener('change', () => {
            if (revokeCertCheck.checked) {
                revokeReason.removeAttribute('disabled');
                revokeReasonLabel.classList.add('required');
            } else {
                revokeReason.setAttribute('disabled', 'disabled');
                revokeReasonLabel.classList.remove('required');
            }
        });
        const removeSSLCertSubmit = document.getElementById('remove-ssl-cert-submit')!;
        const removeSSLStatusContainer = document.getElementById('remove-ssl-status-container')!;
        removeSSLCertSubmit.addEventListener('click', () => {
            removeSSLStatusContainer.innerHTML = '';
            const id = removeSSLCertSubmit.dataset.id;
            if (!id) {
                removeSSLStatusContainer.innerHTML = errorAlert('Es ist ein Fehler aufgetreten');
                return;
            }
            removeSSLCertSubmit.setAttribute('disabled', 'disabled');
            const reason = revokeCertCheck.checked ? Number(revokeReason.value) : -1;
            socket.emit('removeSSLCert', id, revokeCertCheck.checked, reason, (success: boolean, errorMsg: string) => {
                if (!isPageActive()) return;
                if (success) {
                    removeSSLStatusContainer.innerHTML = successAlert(
                        revokeCertCheck.checked ? 'Zertifikat erfolgreich wiederrufen und gelöscht' : 'Zertifikat erfolgreich gelöscht',
                    );
                    document.getElementById('remove-ssl-cert-close')!.innerHTML = 'Schließen';
                } else {
                    removeSSLCertSubmit.removeAttribute('disabled');
                    removeSSLStatusContainer.innerHTML = errorAlert(errorMsg);
                }
            });
        });
    });

    registerLocalDocumentEvent('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
            pageVisible = false;
            pageInvisibleSince = Date.now();
        } else {
            pageVisible = true;
            if (pageInvisibleSince !== -1 && Date.now() - pageInvisibleSince > 1000) {
                socket.emit('requestUIUpdate', ['server', 'sslcert']);
            } else {
                serverGrid.forceRender();
            }
            pageInvisibleSince = -1;
        }
    });

    function sslCertsToGridData(certs: SSLCert[]) {
        return certs.map((cert) => {
            return {
                id: cert._id,
                domains: cert.altNames.join(', '),
                type: cert.type === 'letsencrypt' ? "Let's Encrypt" : capitalizeFirstLetter(cert.type),
                expiresAt: cert.expiresAt,
                renewedAt: new Date(cert.renewedAt).toLocaleDateString(),
                autoRenew: cert.autoRenew,
                createdAt: new Date(cert.createdAt).toLocaleDateString(),
            };
        });
    }

    function loadSSLCertList() {
        // eslint-disable-next-line @typescript-eslint/ban-types
        return new Promise((resolve: (data: {}[]) => void, reject: (error: string) => void) => {
            socket.emit('getSSLCertList', (certs: SSLCert[]) => {
                if (!Array.isArray(certs)) reject('Es ist ein Fehler aufgetreten');
                sslCerts = certs;
                if (!isPageActive()) return;
                resolve(sslCertsToGridData(certs));
            });
        });
    }

    function serversToGridData(servers: SSLServer[]) {
        return servers.map((server) => {
            return {
                id: server._id,
                name: server.name,
                status: server.online,
                lastSeen: server.lastSeen,
                os: server.osPlatform,
                osVersion: server.osVersion,
                version: server.version,
                ip: server.ip,
                createdAt: new Date(server.createdAt).toLocaleDateString(),
            };
        });
    }

    function loadServerList() {
        // eslint-disable-next-line @typescript-eslint/ban-types
        return new Promise((resolve: (data: {}[]) => void, reject: (error: string) => void) => {
            socket.emit('getServerList', (servers: SSLServer[], latestClientVersion_: string) => {
                if (!isPageActive()) return;
                if (!Array.isArray(servers)) reject('Es ist ein Fehler aufgetreten');
                if (typeof latestClientVersion_ !== 'string') reject('Es ist ein Fehler aufgetreten');
                latestClientVersion = latestClientVersion_;
                resolve(serversToGridData(servers));
            });
        });
    }

    async function renderGrids() {
        // Load data async
        const gridData = await Promise.all([loadSSLCertList(), loadServerList()]);

        container.innerHTML = `<div class="row mt-3">
            <div class="col-12">
                <div id="runningCertRequestsWrapper"></div>
                <h2 class="h2">Zertifikate</h2>
                <hr class="mt-0 mb-3">
                <div id="sslCertGridWrapper"></div>
                <h2 class="h2 mt-4">Server</h2>
                <hr class="mt-0 mb-3">
                <div id="serverGridWrapper"></div>
                <div class="mt-3 text-secondary"><small>Dieses Dashboard aktualisiert sich in Echtzeit.</small></div>
            </div>
        </div>`;
        document.getElementById('page-header')!.style.display = 'block';

        socket.emit('getRunningCertRequests', runningCertRequestsAlert);

        sslCertGrid = new Grid({
            columns: [
                {
                    id: 'id',
                    name: 'ID',
                    hidden: true,
                },
                {
                    id: 'domains',
                    name: 'Domains',
                },
                {
                    id: 'type',
                    name: 'Typ',
                },
                {
                    id: 'expiresAt',
                    name: 'Gültig bis',
                    formatter: (cell: any) => {
                        if (typeof cell != 'number') return 'Error';
                        const date = new Date(cell);
                        const days = Math.floor((date.getTime() - Date.now()) / 1000 / 60 / 60 / 24);
                        const color = days < 29 ? 'text-danger' : 'text-success';
                        return gridHtml(`<span class="${color}">${date.toLocaleDateString()} (${days} ${days === 1 ? 'Tag' : 'Tage'})</span>`);
                    },
                },
                {
                    id: 'renewedAt',
                    name: 'Erneuert am',
                },
                {
                    id: 'autoRenew',
                    name: 'Erneuerung',
                    formatter: (cell: any) => {
                        if (typeof cell != 'boolean') return 'Error';
                        if (cell) {
                            return gridHtml('<span class="text-success">Aktiviert</span>');
                        }
                        return gridHtml('<span class="text-danger">Deaktiviert</span>');
                    },
                },
                {
                    id: 'createdAt',
                    name: 'Erstellt am',
                },
                {
                    name: 'Aktionen',
                    formatter: (_cell: any, row: any) => {
                        return gridHtml(`<div>
                    <button type="button" class="btn btn-danger grid-btn" data-action="deleteSSLCert" data-id="${row.cells[0].data}"><i class="ti ti-trash"></i></button>
                </div>`);
                    },
                },
            ],
            search: true,
            sort: true,
            resizable: false,
            language: deDE,
            data: gridData[0],
        }).render(document.getElementById('sslCertGridWrapper')!);

        serverGrid = new Grid({
            columns: [
                {
                    id: 'id',
                    name: 'ID',
                    hidden: true,
                },
                {
                    id: 'name',
                    name: 'Name',
                },
                {
                    id: 'lastSeen',
                    name: 'lastSeen',
                    hidden: true,
                },
                {
                    id: 'status',
                    name: 'Status',
                    formatter: (cell: any, row: any) => {
                        if (typeof cell != 'boolean') return 'Error';
                        if (cell) {
                            return gridHtml('<span class="text-success">Online</span>');
                        }
                        if (Number(row.cells[2].data) === 0) return gridHtml('<span class="text-danger">Noch nie online</span>');
                        return gridHtml(`<span class="text-danger">Offline (seit ${humanTimeDiffNow(Number(row.cells[2].data), true)})</span>`);
                    },
                },
                {
                    id: 'version',
                    name: 'Version',
                    formatter: (cell: any) => {
                        if (typeof cell != 'string') return 'Error';
                        if (compareVersions(cell, latestClientVersion) === 2) {
                            return gridHtml(
                                `<button type="button" class="btn text-danger" data-bs-toggle="modal" data-bs-target="#update-modal">Nicht aktuell (${cell})</button>`,
                            );
                        }
                        return gridHtml(`<span class="text-success">Aktuell (${cell})</span>`);
                    },
                },
                {
                    id: 'os',
                    name: 'Betriebssystem',
                    formatter: (cell: any, row: any) => {
                        if (typeof cell != 'string') return 'Error';
                        let os;
                        if (cell === 'win32') {
                            os = 'Windows';
                        } else if (cell === 'darwin') {
                            os = 'macOS';
                        } else {
                            os = capitalizeFirstLetter(cell);
                        }
                        return gridHtml(`<span class="text-dotted" title="${row.cells[6].data}">${os}</span>`);
                    },
                },
                {
                    id: 'osVersion',
                    name: 'osVersion',
                    hidden: true,
                },
                {
                    id: 'ip',
                    name: 'IP-Adresse',
                    formatter: (cell: any) => {
                        if (typeof cell != 'string') return '???';
                        return gridHtml(`<a href="https://ipinfo.io/${cell}" target="_blank" rel="noopener noreferrer">${cell}</a>`);
                    },
                },
                {
                    id: 'createdAt',
                    name: 'Erstellt am',
                },
                {
                    name: 'Aktionen',
                    formatter: (_cell: any, row: any) => {
                        return gridHtml(`<div class="btn-list">
                    <button type="button" class="btn btn-primary grid-btn" data-action="editServer" data-id="${row.cells[0].data}"><i class="ti ti-edit"></i></button>
                    <button type="button" class="btn btn-secondary grid-btn" data-action="serverLogs" data-id="${row.cells[0].data}"><i class="ti ti-article"></i></button>
                    <button type="button" class="btn btn-danger grid-btn" data-action="deleteServer" data-id="${row.cells[0].data}" data-last-online="${row.cells[2].data}"><i class="ti ti-trash"></i></button>
                </div>`);
                    },
                },
            ],
            search: true,
            sort: true,
            resizable: false,
            language: deDE,
            data: gridData[1],
        }).render(document.getElementById('serverGridWrapper')!);
    }

    function runningCertRequestsAlert(certRequests: RunningCertRequest[]) {
        if (!isPageActive()) return;
        const runningCertRequestsWrapper = document.getElementById('runningCertRequestsWrapper')!;
        if (!runningCertRequestsWrapper) return;
        if (!Array.isArray(certRequests) || certRequests.length === 0) {
            runningCertRequestsWrapper.innerHTML = '';
            return;
        }
        runningCertRequestsWrapper.innerHTML = `<div class="alert alert-primary alert-dismissible fade show mb-5" role="alert">
                <div class="d-flex align-items-center">
                    <div class="spinner-border text-primary" role="status"></div>
                    <div class="ms-3">
                        Es ${certRequests.length === 1 ? 'wird' : 'werden'} aktuell ${certRequests.length} Zertifikat${
                            certRequests.length === 1 ? '' : 'e'
                        } erstellt oder erneuert. <a href="/newCert">Klicken Sie hier, um den aktuellen Status zu sehen.</a>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Schließen"></button>
            </div>`;
    }
</script>
